- debug:
    msg: |
      terraform_backend_type: {{ terraform_backend_type }}
      terraform_state: {{ terraform_state }}
      cluster_upgrade_system_packages: {{ cluster_upgrade_system_packages | default('undefined') }}

# We need to convert the floating IP id to an address for Terraform
# if we we have cluster_floating_ip, otherwise assume that we're
# assigning the FIP in Terraform and that it will be available in
# outputs.cluster_gateway_ip.

- block:
    - name: Look up floating IP
      include_role:
        name: stackhpc.terraform.infra
        tasks_from: lookup_floating_ip
      vars:
        os_floating_ip_id: "{{ cluster_floating_ip }}"

    - name: Set floating IP address fact
      set_fact:
        cluster_floating_ip_address: "{{ os_floating_ip_info.floating_ip_address }}"

  when: cluster_floating_ip is defined

#- name: Install Terraform binary
#  include_role:
#    name: stackhpc.terraform.install

#- name: Make Terraform project directory
#  file:
#    path: "{{ terraform_project_path }}"
#    state: directory

- name: Write backend configuration
  copy:
    content: |
      terraform {
        backend "{{ terraform_backend_type }}" { }
      }
    dest: "{{ terraform_project_path }}/backend.tf"

# Patching in this appliance is implemented as a switch to a new base image
# So unless explicitly patching, we want to use the same image as last time
# To do this, we query the previous Terraform state before updating
- block:
    - name: Get previous Terraform state
      stackhpc.terraform.terraform_output:
        binary_path: "{{ terraform_binary_path }}"
        project_path: "{{ terraform_project_path }}"
        backend_config: "{{ terraform_backend_config }}"
      register: ipa_cluster_infra_terraform_output

    - name: Extract image from Terraform state
      set_fact:
        cluster_previous_image: "{{ ipa_cluster_infra_terraform_output.outputs.ipa_cluster_image.value }}"
      when: '"ipa_cluster_image" in ipa_cluster_infra_terraform_output.outputs'
  when:
    - terraform_state == "present"
    - cluster_upgrade_system_packages is not defined or not cluster_upgrade_system_packages

- name: Detect volume device prefix from image metadata
  block:
    - name: Get image metadata from OpenStack API
      openstack.cloud.image_info:
        image: "{{ ipa_cluster_previous_image | default(ipa_cluster_image) }}"
      register: ipa_cluster_image_info

    - name: Set volume_device_prefix fact
      set_fact:
        block_device_prefix: >-
           {{
              'sd' if ipa_cluster_image_info.image.metadata.hw_scsi_model is defined and
              ipa_cluster_image_info.image.metadata.hw_scsi_model in scsi_models
              else 'vd'
           }}
  # Only run when block_device_prefix isn't set as an extravar
  when: block_device_prefix is not defined


- name: Template Terraform files into project directory
  template:
    src: >-
      {{
        "{}{}.j2".format(
          (
             cluster_terraform_template_dir ~ "/"
             if cluster_terraform_template_dir is defined
             else ""
          ),
          item
        )
      }}
    dest: "{{ terraform_project_path }}/{{ item }}"
  loop:
    - outputs.tf
    - providers.tf
    - resources.tf
  when: not do_not_change_terraform | default(False)

- name: Provision infrastructure
  include_role:
    name: stackhpc.terraform.infra

- name: Set cluster_floating_ip_address fact
  set_fact:
    cluster_floating_ip_address: "{{ hostvars[groups['openstack'][0]].terraform_provision.outputs.cluster_gateway_ip.value }}"
  when:
    - terraform_state == "present"
    - hostvars[groups['openstack'][0]].terraform_provision.outputs.cluster_gateway_ip is defined

- name: set ipa_cluster_cidr when required
  set_fact:
    ipa_cluster_cidr: "{{ terraform_provision.outputs.ipa_cluster_cidr }}"
  when:
    - ipa_cluster_cidr is not defined

# The hosts provisioned by Terraform are put into a primary group by the role
# These tasks then add those hosts to additional groups depending on the selected options
- name: Add cluster hosts to required groups
  add_host:
    name: "{{ item }}"
    groups: "{{ hostvars[item].group_names | stackhpc.terraform.terraform_infra_expand_groups(ipa_cluster_groups_required) }}"
  loop: "{{ groups.get('cluster', []) }}"


